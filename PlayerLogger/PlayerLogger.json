{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"----------\n-- INIT --\n----------\nunit.hideWidget()\n\n-- knownUser = \"User1\"\n-- knownUser = \"User1,User2,User3\"\nknownUser = \"\" --export Keep the list between quotes '' and no spaces ex: 'Davemane42,User2'\nknownOrg = \"\" --export Keep the list between quotes '' and no spaces around the names ex: \"The Prospectors,Org Name2\"\nignoreKnown = true --export Doesn't display known user(s) to prevent screen flooding\n\nlocation = \"Lobby\" --export Keep between quotes ''\n\nmergeLastDay = true --export if the player was seen in the last 24h, delete the old one\nmergeLastDayCount = 25 --export search the last x entries for the 'mergeLastDay' setting\nknown = false\nmode = \"\"\nversion = \"4.1\"\n\n---------------\n-- Functions --\n---------------\n\n-- Encode logData table to \"JSON\"\nfunction encodeLogData(limit)\n    limit = limit or #logData\n\n    local buffer = \"[\"\n    for i=1, limit do\n        buffer = string.format('%s[\"%s\",%d,\"%s\",%s],', buffer, logData[i][1], logData[i][2], logData[i][3], logData[i][4])\n    end\n    return string.sub(buffer, 1, -2)..\"]\"\nend\n\n-- Load the first 100 entries of a logData to the screen input in 1000 characters chunks\nfunction loadScreenData()\n    if #logData > 0 then\n        comState = \"load\"\n        local limit = math.min(100, #logData)\n        loadBuffer = encodeLogData(limit)\n\n        -- Send the first chunk of 1000 characters\n        local max = math.ceil(loadBuffer:len()/1000)\n        local screenData = string.format(\"load,1,%s %s\", max, string.sub(loadBuffer, 1, 1000))\n        screen.setScriptInput(screenData)\n\n        system.print(string.format(\"Sending %s characters with %s %s to the screen\", #loadBuffer, limit, #logData > 1 and  \"Entries\" or \"Entry\"))\n    else\n        screen.setScriptInput(\"load,1,1 []\")\n    end\nend\n\n-- Save a logData/string to \"logData\" key in multiple databanks\nfunction saveData(str)\n    local str = str or false\n    if #logData > 0 or str ~= false then\n        -- Clear all Databanks\n        for k,v in pairs(dataBanks) do\n            v.setStringValue(\"logData\", \"\")\n        end\n\n        -- Type Check\n        local buffer = \"\"\n        if str == false then\n            buffer = encodeLogData()\n        else\n            buffer = str\n        end\n\n        -- Save to DataBanks\n        if buffer ~= \"\" then\n            local chunkSize = 10000\n            local max = math.ceil(buffer:len()/chunkSize)\n            if max > #dataBanks then\n                local index = string.match(buffer, '^.*()%[\"') -- Find the last instance of [\" in the buffer\n\n                system.print(\"Not egnough space, Deleting Last Entry\")\n                system.print(string.sub(buffer, index, -2))\n\n                saveData(string.sub(buffer, 1, index-2)..\"]\")\n            else\n                for i=1, max do\n                    dataBanks[i].setStringValue(\"logData\", string.sub(buffer, 1+chunkSize*(i-1), chunkSize+chunkSize*(i-1)))\n                end\n                if str then\n                    system.print(string.format(\"Saved %s characters to Databank%s\", #buffer, #dataBanks > 1 and  \"s\" or \"\"))\n                else\n                    system.print(string.format(\"Saved %s characters with %s %s to Databank%s\", #buffer, #logData, #logData > 1 and  \"Entries\" or \"Entry\", #dataBanks > 1 and  \"s\" or \"\"))\n                end\n            end\n        end\n    else\n        system.print(\"skipped atempt to save no data\")\n    end\nend\n\n-- return a table from \"logData\" in multiple databanks\nfunction loadData()\n    local buffer = \"\"\n    for k,v in pairs(dataBanks) do\n        -- Import old data from before v3.0\n        if v.hasKey(\"latest\") == true then\n            buffer = v.getStringValue(\"latest\")\n            v.clear()\n            if k == 1 then\n                dataBanks[1].setStringValue(\"screenVer\", version)\n            end\n            system.print(string.format(\"Old data Detected, importing %s characters\", #buffer))\n            break\n        end\n\n        if v.hasKey(\"logData\") == true then\n            buffer = buffer..v.getStringValue(\"logData\")\n        end\n    end\n\n    -- Use pattern matching to get a logData table from the buffer string\n    local newData = {}\n    if buffer ~= \"\" then\n        local stringtoboolean = { [\"true\"]=true, [\"false\"]=false }\n        for name, id, time, known in string.gmatch(buffer, '%[(%b\"\"),(%d+),\"([%d/ :]+)\",(%a+)%]') do\n            table.insert(newData, #newData+1, {string.sub(name, 2, -2), tonumber(id), time, stringtoboolean[known]})\n        end\n        system.print(string.format(\"Loaded %s characters with %s Entries from Databank%s\", #buffer, #newData, #dataBanks > 1 and  \"s\" or \"\"))\n    else\n        system.print(\"No data loaded\")\n    end\n    return newData\nend\n\n-- Get curent time in dd/mm/yy h:m:s\nfunction getTime(hoursOffset)\n    local hoursOffset = hoursOffset or 0\n    local unixTime = math.floor(system.getUtcTime()) + (3600*hoursOffset) --(Oct. 1, 2017, at 00:00) //1506729600 //1506816000\n\n    local hours = math.floor(unixTime / 3600 % 24)\n    local minutes = math.floor(unixTime / 60 % 60)\n    local seconds = math.floor(unixTime % 60)\n\n    local unixTime = math.floor(unixTime / 86400) + 719468\n    local era = math.floor(unixTime / 146097)\n    local doe = math.floor(unixTime - era * 146097)\n    local yoe = math.floor((doe - doe / 1460 + doe / 36524 - doe / 146096) / 365)\n    local year = math.floor(yoe + era * 400)\n    local doy = doe - math.floor((365 * yoe + yoe / 4 - yoe / 100))\n    local mp = math.floor((5 * doy + 2) / 153)\n\n    local day = math.ceil(doy - (153 * mp + 2) / 5 + 1)\n    local month = math.floor(mp + (mp < 10 and 3 or -9))\n    local year = year + (month <= 2 and 1 or 0)\n\n    seconds = seconds < 10 and  \"0\" .. seconds or seconds\n    minutes = minutes < 10 and  \"0\" .. minutes or minutes\n    hours = hours < 10 and  \"0\" .. hours or hours\n    day = day < 10 and  \"0\" .. day or day\n    month = month < 10 and  \"0\" .. month or month\n    year = string.sub(year, 3)\n\n    return (string.format(\"%s/%s/%s %s:%s:%s\",day, month, year, hours, minutes, seconds))\nend\n\n-----------------\n-- Screen Code --\n-----------------\n\n-- Update screen code if the version get changed\nfunction loadScreenCode()\n    system.print(\"-----------------------------------------------\")\n    system.print(string.format(\"Updated screen version from %s to %s\", dataBanks[1].getStringValue(\"screenVer\"), version))\n    system.print(\"-----------------------------------------------\")\n\n    dataBanks[1].setStringValue(\"screenVer\", version)\n    screen.setRenderScript([[\n----------\n-- INIT --\n----------\nlocal rx, ry = getResolution()\nlocal layer = createLayer()\nlocal front = createLayer()\nlocal font = loadFont('FiraMono', 20)\nlocal fontAH, fontDH = getFontMetrics(font)\n\n-- Set default text color to red\nsetDefaultFillColor(layer, Shape_Text, 1, 0, 0, 1)\n\nif not init then\n    init = true\n    data = {}\n    buffer = \"\"\n    comState = \"\"\nend\n\n-------------------\n-- PB <-> Screen --\n-- Communication --\n-------------------\nlocal input = getInput()\nif input ~= \"\" then\n    local instruction = {}\n    local pos = string.find(input, \" \")\n    if pos == nil then pos=-1 end\n    for word in string.gmatch(string.sub(input, 1, pos), \"%w+\") do\n        table.insert(instruction, word)\n    end\n    local inputData = string.sub(input, pos+1)\n    if instruction[1] == \"load\" then\n        if inputData == \"[]\" then\n            data = {}\n        else\n            local i = tonumber(instruction[2])\n            local max = tonumber(instruction[3])\n\n            buffer = buffer..inputData\n\n            if i < max then\n                setOutput(string.format(\"load,%s,%s \", math.floor(i+1), max))\n            else\n                -- Use pattern matching to return 'str' JSON data as a log table\n                local tempData = {}\n                local stringtoboolean = { [\"true\"]=true, [\"false\"]=false }\n                for name, id, time, known in string.gmatch(buffer, '%[(%b\"\"),(%d+),\"([%d/ :]+)\",(%a+)%]') do\n                    table.insert(tempData, #tempData+1, {string.sub(name, 2, -2), tonumber(id), time, stringtoboolean[known]})\n                end\n                if tempData ~= nil then\n                    data = tempData\n                end\n                buffer = \"\"\n                comState = nil\n                setOutput(\"end\")\n            end\n        end\n    end\nend\n----------------\n-- Player Log --\n----------------\nfor k, v in ipairs(data) do\n    -- How many fit vertically\n    local fit = math.floor(ry/fontAH)\n    if k > fit*2 then break end\n\n    local text = string.format('%s %s %s', v[3], v[1], v[2])\n    local textX = 5+math.floor((k-1)/fit)*rx/2\n    local textY = fontAH*(((k-1)%fit)+1)\n\n    if v[4] then setNextFillColor(layer, 0, 1, 0, 1) end\n    addText(layer, font, text, textX, textY)\nend\n\n----------------\n-- Info Panel --\n----------------\nlocal spacing, border = 12, 5\nlocal fontSmall = loadFont('FiraMono', spacing)\nlocal text = {\n    'Location: \"]]..location..[[\"',\n    \"Player Logger v]]..version..[[\"\n}\n-- find the string with the most width\nlocal width, height = 0, #text*spacing\nfor k,v in pairs(text) do\n    local curWidth, height = getTextBounds(fontSmall, v)\n    if curWidth > width then width = curWidth end\nend\nlocal x, y = rx-width-border*2, ry-height-border*2\n-- Draw text / box\nfor k,v in pairs(text) do\n    setNextFillColor(front, 1, 0, 0, 1)\n    setNextTextAlign(front, AlignH_Center, AlignV_Middle)\n    setNextFillColor(front, 1, 1, 1, 1)\n    addText(front, fontSmall, v, x+width/2, y + (k-1)*spacing + spacing/2)\nend\nsetNextStrokeColor(front, 1, 1, 1, 1)\nsetNextStrokeWidth(front, 1)\nsetNextFillColor(front, 0, 0, 0, 1)\naddBoxRounded(front, x-border, y-border, width+border*2, height+border*2, 1)\n        ]])\nend\n\n---------------------\n-- Seting up Slots --\n---------------------\n\n-- Loop trough slots and get DataBank(s), screen and switch\ndataBanks = {}\nscreen = nil\nswitch = nil\nfor slot_name, slot in pairs(unit) do\n    if type(slot) == \"table\" and type(slot.export) == \"table\" and slot.getElementClass then\n        if slot.getClass():lower() == 'databankunit' then\n            slot.slotname = slot_name\n            table.insert(dataBanks,slot)\n        end\n        if slot.getClass():lower() == 'screenunit' then\n            screen = slot\n        end\n        if slot.getClass():lower() == 'manualswitchunit' then\n            switch = slot\n        end\n    end\nend\nlocal flag = false\nif #dataBanks == 0 then\n    system.print(\"No Databank Detected, add one for the PlayerLogger to work\")\n    flag = true\nelse\n    --sorting dataBanks by slotname to be sure the data isnt scrambled\n    table.sort(dataBanks, function(a,b) return a.slotname < b.slotname end)\n    system.print(string.format(\"%d Databank%s Connected\", #dataBanks, #dataBanks > 1 and  \"s\" or \"\"))\nend\nif screen == nil then\n    system.print(\"No Screen Detected, add one for the PlayerLogger to work\")\n    flag = true\nelse\n    system.print(\"Screen Connected\")\nend\nif switch == nil then\n    system.print(\"No Manual Switch Detected, add one for the PlayerLogger to work\")\n    flag = true\nelse\n    system.print(\"Manual Switch Connected\")\nend\n\nif flag then\n    unit.exit()\n    switch.deactivate()\n    return\nend\n\n----------\n-- Code --\n----------\n\nscreen.activate()\nscreen.setScriptInput(\"\")\nscreen.clearScriptOutput()\n\nif dataBanks[1].getStringValue(\"screenVer\") ~= version then\n    loadScreenCode()\nend\n\nlogData = loadData()\n\n-- Convert knownUser CSV to a table\nplayerData = database.getPlayer(player.getId())\nif knownUser ~= \"\" then\n    for name in string.gmatch(knownUser, \"([^,]+)\") do\n        if playerData.name == name:match(\"^%s*(.-)%s*$\") then\n            known = true\n        end\n    end\nend\n\n-- Convert knownOrg CSV to a table\norgList = player.getOrgIds()\nif knownOrg ~= \"\" and #orgList>0 then\n    for name in string.gmatch(knownOrg, \"([^,]+)\") do\n        -- Look trough master player orgs\n        for k, v in pairs(orgList) do\n            if database.getOrganization(v).name == name:match(\"^%s*(.-)%s*$\") then\n                known = true\n            end\n        end\n    end\nend\n\n-- If explicit PB activation\nif unit.getSignalIn('in')==0 then\n    system.print(\"-----------------------------------------------\")\n    if known then\n        system.print(\"Debug enabled, type 'help' to get a list of commands\")\n        system.print(\"-----------------------------------------------\")\n        loadScreenData()\n        return\n    else\n        system.print(\"Add yourself to the knownUser list on line 7 of unit.start()\")\n        system.print(\"-----------------------------------------------\")\n    end\nend\n\nif (known and ignoreKnown) == false then\n\n    if #logData > 0 then\n        if playerData.id == logData[1][2] then\n            system.print(string.format(\"Deleting repeating entry of %s\", logData[1][1]))\n            table.remove(logData, 1)\n        elseif mergeLastDay then\n            local limit = #logData > mergeLastDayCount and mergeLastDayCount or #logData\n            local currentTimeString = string.match(getTime(), '([%d/]+)')\n            local pastTimeString = string.match(getTime(-12), '([%d/]+)')\n            system.print(pastTimeString)\n            for i=1, limit do\n                local timeString = string.match(logData[i][3], '([%d/]+)')\n                if timeString == currentTimeString or timeString == pastTimeString then\n                    if playerData.id == logData[i][2] then\n                        system.print(string.format(\"Deleting past entry of %s from %s\", logData[i][1], timeString))\n                        table.remove(logData, i)\n                        break\n                    end\n                else\n                    break\n                end\n            end\n            system.print(count)\n        end\n    end\n\n    table.insert(logData, 1, {playerData.name, playerData.id, getTime(), known})\n    saveData()\nend\n\nloadScreenData()\n\nexit = true\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"if unit.getSignalIn('in')==1 then return end\nif known == false then system.print(\"UNKNOWN USER CANNOT INPUT COMMAND\"); return end\n\nlocal arguments = {}\nfor word in string.gmatch(text, \"%w+\") do\n    table.insert(arguments, word:lower())\nend\n\nif mode == \"clear\" then\n    mode = \"\"\n    if arguments[1] == \"yes\" then\n       for k,v in pairs(dataBanks) do\n            v.setStringValue (\"logData\", \"\")\n        end\n\n        logData = {}\n        screen.clearScriptOutput()\n        loadScreenData()\n\n        system.print(\"DataBank Cleared\")\n        exit=true\n        return\n    else\n        system.print(\"\")\n    end\nend\n\nif arguments[1] == \"clear\" then\n    mode = \"clear\"\n    system.print(string.format(\"Type 'yes' to confirm deleting %s %s\", #logData, #logData > 1 and  \"Entries\" or \"Entry\"))\nelseif arguments[1] == \"dump\" then\n    system.print(\"\")\n    if #logData > 0 then\n        screen.setHTML(encodeLogData())\n\n        system.print(string.format(\"dumped table with %s %s to the screen HTML. CTRL+L or\", #logData, #logData > 1 and  \"Entries\" or \"Entry\"))\n        system.print(\"Right click (on the screen) -> Advanced -> Edit HTML content\")\n        dataBanks[1].setStringValue(\"screenVer\", nil)\n\n        exit=true\n    else\n        system.print(\"No data to dump\")\n    end\nelseif arguments[1] == \"remove\" then\n\n    local i = tonumber(arguments[2])\n    if i and logData[i] ~= nil then\n\n        table.remove(logData, i)\n        saveData()\n        loadScreenData()\n        system.print(\"\")\n        system.print(\"removed #\"..i..\"\")\n    end\nelseif arguments[1] == \"exit\" then\n    loadScreenData()\n    exit=true\nelseif arguments[1] == \"update\" then\n    loadScreenCode()\n    loadScreenData()\n    exit=true\nelseif arguments[1] == \"help\" then\n\n    local help = {\n        \"'clear' [clear the databank]\",\n        \"'dump' [dump the table as JSON in the HTML so you can copy it]\",\n        \"'exit' [exit debug mode]\",\n        \"'import' [WIP]\",\n        \"'remove (indice)' [remove the entry from the list]\",\n        \"'update' [Update the screen code]\"\n    }\n    system.print(\"\")\n    for k, v in pairs(help) do\n        system.print(v)\n    end\nend\n","filter":{"args":[{"variable":"*"}],"signature":"onInputText(text)","slotKey":"-4"},"key":"1"},{"code":"local output = screen.getScriptOutput()\nif output ~= \"\" then\n    screen.setScriptInput(\"\")\n    screen.clearScriptOutput()\n\n    local instruction = {}\n    local pos = string.find(output, \" \")\n    if pos == nil then pos=-1 end\n    for word in string.gmatch(string.sub(output, 1, pos), \"%w+\") do\n        table.insert(instruction, word)\n    end\n    local outputData = string.sub(output, pos+1)\n\n    if instruction[1] == \"load\" then\n\n        local i = tonumber(instruction[2])\n        local max = tonumber(instruction[3])\n\n        if i <= max then\n            local screenData = string.format(\"load,%s,%s %s\", i, max, string.sub(loadBuffer, 1+1000*(i-1), 1000+1000*(i-1)))\n            screen.setScriptInput(screenData)\n        end\n    elseif instruction[1] == \"end\" then\n        comState = nil\n        loadBuffer = nil\n        screen.setScriptInput(\"\")\n    end\nend\n--system.print(comState)\nif exit and comState == nil then \n    switch.deactivate()\n    unit.exit() \nend\n","filter":{"args":[],"signature":"onUpdate()","slotKey":"-4"},"key":"2"}],"methods":[],"events":[]}